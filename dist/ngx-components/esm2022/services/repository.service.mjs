import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class RepositoryService {
    constructor(http, baseUrl) {
        this.http = http;
        this.baseUrl = baseUrl;
    }
    search(request) {
        return this.http.post(this.baseUrl + 'search', request ?? {});
    }
    getAll(request) {
        return this.http.post(this.baseUrl + 'getAll', request ?? {});
    }
    getById(id) {
        return this.http.get(this.baseUrl + id);
    }
    create(entity) {
        return this.http.post(this.baseUrl, entity);
    }
    createMany(entities) {
        return this.http.post(this.baseUrl + 'batch', { models: entities });
    }
    update(id, entity) {
        return this.http.put(this.baseUrl + id, entity);
    }
    patch(id, patch) {
        patch = Array.isArray(patch) ? patch : [patch];
        return this.http.patch(this.baseUrl + id, { id: id, patch: patch });
    }
    patchMany(ids, patch) {
        patch = Array.isArray(patch) ? patch : [patch];
        return this.http.patch(this.baseUrl + 'batch', { ids: ids, patch: patch });
    }
    delete(id) {
        return id ? this.http.delete(this.baseUrl + id) : of(void 0);
    }
    deleteMany(ids) {
        return ids ? this.http.delete(this.baseUrl, { body: { ids: ids } }) : of(void 0);
    }
    sort(ids) {
        return this.http.post(this.baseUrl + 'sort', { ids: ids });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: RepositoryService, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: RepositoryService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: RepositoryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: undefined }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNvbXBvbmVudHMvc3JjL3NlcnZpY2VzL3JlcG9zaXRvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQU90QyxNQUFNLE9BQWdCLGlCQUFpQjtJQUVyQyxZQUNZLElBQWdCLEVBQ2hCLE9BQWU7UUFEZixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQVE7SUFBSSxDQUFDO0lBRWhDLE1BQU0sQ0FBQyxPQUFzQjtRQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFlLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQXFCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBTztRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQU8sRUFBRSxNQUFTO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELEtBQUssQ0FBQyxFQUFPLEVBQUUsS0FBc0I7UUFDbkMsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFPLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVUsRUFBRSxLQUFzQjtRQUMxQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBUTtRQUNiLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQVc7UUFDcEIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQWE7UUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7OEdBbERtQixpQkFBaUI7a0hBQWpCLGlCQUFpQixjQURiLE1BQU07OzJGQUNWLGlCQUFpQjtrQkFEdEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJhc2VSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL2Jhc2UtcmVxdWVzdCc7XHJcbmltcG9ydCB7IFBhZ2VkUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9wYWdlZC1yZXF1ZXN0JztcclxuaW1wb3J0IHsgUGFnZWRMaXN0IH0gZnJvbSAnLi4vbW9kZWxzL3BhZ2VkLWxpc3QnO1xyXG5pbXBvcnQgeyBQYXRjaCB9IGZyb20gJy4uL21vZGVscy9wYXRjaCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVwb3NpdG9yeVNlcnZpY2U8VCA9IGFueSwgVElkIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nID0gbnVtYmVyPiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nKSB7IH1cclxuXHJcbiAgc2VhcmNoKHJlcXVlc3Q/OiBQYWdlZFJlcXVlc3QpOiBPYnNlcnZhYmxlPFBhZ2VkTGlzdDxUPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFBhZ2VkTGlzdDxUPj4odGhpcy5iYXNlVXJsICsgJ3NlYXJjaCcsIHJlcXVlc3QgPz8ge30pO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxsKHJlcXVlc3Q/OiBCYXNlUmVxdWVzdCk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8VFtdPih0aGlzLmJhc2VVcmwgKyAnZ2V0QWxsJywgcmVxdWVzdCA/PyB7fSk7XHJcbiAgfVxyXG5cclxuICBnZXRCeUlkKGlkOiBUSWQpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFQ+KHRoaXMuYmFzZVVybCArIGlkKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZShlbnRpdHk6IFQpOiBPYnNlcnZhYmxlPFRJZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFRJZD4odGhpcy5iYXNlVXJsLCBlbnRpdHkpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWFueShlbnRpdGllczogVFtdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8dm9pZD4odGhpcy5iYXNlVXJsICsgJ2JhdGNoJywgeyBtb2RlbHM6IGVudGl0aWVzIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGlkOiBUSWQsIGVudGl0eTogVCk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8dm9pZD4odGhpcy5iYXNlVXJsICsgaWQsIGVudGl0eSk7XHJcbiAgfVxyXG5cclxuICBwYXRjaChpZDogVElkLCBwYXRjaDogUGF0Y2ggfCBQYXRjaFtdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICBwYXRjaCA9IEFycmF5LmlzQXJyYXkocGF0Y2gpID8gcGF0Y2ggOiBbcGF0Y2hdO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaDx2b2lkPih0aGlzLmJhc2VVcmwgKyBpZCwgeyBpZDogaWQsIHBhdGNoOiBwYXRjaCB9KTtcclxuICB9XHJcblxyXG4gIHBhdGNoTWFueShpZHM6IFRJZFtdLCBwYXRjaDogUGF0Y2ggfCBQYXRjaFtdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICBwYXRjaCA9IEFycmF5LmlzQXJyYXkocGF0Y2gpID8gcGF0Y2ggOiBbcGF0Y2hdO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaDx2b2lkPih0aGlzLmJhc2VVcmwgKyAnYmF0Y2gnLCB7IGlkczogaWRzLCBwYXRjaDogcGF0Y2ggfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoaWQ/OiBUSWQpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiBpZCA/IHRoaXMuaHR0cC5kZWxldGU8dm9pZD4odGhpcy5iYXNlVXJsICsgaWQpIDogb2Yodm9pZCAwKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZU1hbnkoaWRzPzogVElkW10pOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiBpZHMgPyB0aGlzLmh0dHAuZGVsZXRlPHZvaWQ+KHRoaXMuYmFzZVVybCwgeyBib2R5OiB7IGlkczogaWRzIH0gfSkgOiBvZih2b2lkIDApO1xyXG4gIH1cclxuXHJcbiAgc29ydChpZHM6IG51bWJlcltdKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8dm9pZD4odGhpcy5iYXNlVXJsICsgJ3NvcnQnLCB7IGlkczogaWRzIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=