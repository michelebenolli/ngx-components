import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';
//import { PagedList } from 'src/app/shared/models/paged-list';
import { SelectionModel } from '@angular/cdk/collections';
import { EDITOR } from '../../editor';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/list";
import * as i2 from "@angular/material/paginator";
import * as i3 from "../../editor";
export class PickerEditorComponent {
    constructor(editor) {
        this.editor = editor;
        this.params = {}; // PagedRequest; // TODO: USe it for paging?
        this.changed = new EventEmitter(); // TODO: USe it to update data from outside
        this.pageSize = 10;
    } //,
    // TODO REMOVE private injector: Injector) { }
    ngOnInit() {
        const data = this.editor.config.data;
        this.config = data.config;
        // this.service = this.injector.get<any>(data.config.service);
        this.editor.saved.subscribe(() => this.save());
        this.selection = new SelectionModel(true, this.config.multiple ? data.items : []);
        this.selection.isSelected = this.isChecked.bind(this);
        // TODO this.params = getRequest(this.config?.filters);
        // TODO this.getData();
    }
    /*getData(): void {
      this.service.search(this.params).subscribe((result: PagedList<T>) => {
        this.items = result;
      });
    }*/
    toggle(item) {
        const selected = this.selection.selected.find(x => x.id === item.id);
        if (selected)
            this.selection.deselect(selected);
        else
            this.selection.select(item);
        if (!this.config.multiple)
            this.save();
    }
    save() {
        this.editor.close(this.selection.selected);
    }
    isChecked(item) {
        return this.selection.selected.some(x => x.id === item.id);
    }
    onPageChange(event) {
        this.params.pageNumber = event.pageIndex + 1;
        // this.getData();
        this.changed.emit(this.params);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: PickerEditorComponent, deps: [{ token: EDITOR }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.0", type: PickerEditorComponent, selector: "app-picker-editor", inputs: { totalItems: "totalItems", pageSize: "pageSize" }, outputs: { changed: "changed" }, ngImport: i0, template: "<!-- Filters -->\n<!-- // TODO: Add filters... -->\n<!--<app-filters *ngIf=\"config.filters\" [filters]=\"config.filters\" (onFilter)=\"filter($event)\" />-->\n\n<!-- Selection list -->\n@if (items?.length) {\n  <mat-selection-list #picker class=\"mt-2\"\n    [multiple]=\"config.multiple\" [hideSingleSelectionIndicator]=\"true\">\n    <!-- // TODO: Check if the congig.id(item) condition below is correct -->\n    @for (item of items; track item) {\n      <mat-list-option class=\"list-item\" [value]=\"item.id\"\n        [selected]=\"selection.isSelected(item)\" (click)=\"toggle(item)\">\n        <span matListItemTitle>{{ config.name(item) }}</span>\n        @if (config.description) {\n          <span matListItemLine>{{ config.description(item) }}</span>\n        }\n      </mat-list-option>\n    }\n  </mat-selection-list>\n} @else {\n  <div class=\"border rounded p-3 mt-3\">\n    {{ 'Nessun elemento da visualizzare' }} <!-- // TODO: Translate in whole library -->\n  </div>\n}\n\n\n<!-- Pagination -->\n<!-- // TODO: Chnage pagination -->\n@if (items && totalItems && pageSize && totalItems > pageSize) {\n  <mat-paginator [length]=\"totalItems\"\n    [pageSize]=\"pageSize\" [hidePageSize]=\"true\" (page)=\"onPageChange($event)\" showFirstLastButtons />\n}", styles: [".list-item{border-bottom:1px solid #ebedef}\n"], dependencies: [{ kind: "component", type: i1.MatSelectionList, selector: "mat-selection-list", inputs: ["color", "compareWith", "multiple", "hideSingleSelectionIndicator", "disabled"], outputs: ["selectionChange"], exportAs: ["matSelectionList"] }, { kind: "component", type: i1.MatListOption, selector: "mat-list-option", inputs: ["togglePosition", "checkboxPosition", "color", "value", "selected"], outputs: ["selectedChange"], exportAs: ["matListOption"] }, { kind: "directive", type: i1.MatListItemLine, selector: "[matListItemLine]" }, { kind: "directive", type: i1.MatListItemTitle, selector: "[matListItemTitle]" }, { kind: "component", type: i2.MatPaginator, selector: "mat-paginator", inputs: ["color", "pageIndex", "length", "pageSize", "pageSizeOptions", "hidePageSize", "showFirstLastButtons", "selectConfig", "disabled"], outputs: ["page"], exportAs: ["matPaginator"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: PickerEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-picker-editor', template: "<!-- Filters -->\n<!-- // TODO: Add filters... -->\n<!--<app-filters *ngIf=\"config.filters\" [filters]=\"config.filters\" (onFilter)=\"filter($event)\" />-->\n\n<!-- Selection list -->\n@if (items?.length) {\n  <mat-selection-list #picker class=\"mt-2\"\n    [multiple]=\"config.multiple\" [hideSingleSelectionIndicator]=\"true\">\n    <!-- // TODO: Check if the congig.id(item) condition below is correct -->\n    @for (item of items; track item) {\n      <mat-list-option class=\"list-item\" [value]=\"item.id\"\n        [selected]=\"selection.isSelected(item)\" (click)=\"toggle(item)\">\n        <span matListItemTitle>{{ config.name(item) }}</span>\n        @if (config.description) {\n          <span matListItemLine>{{ config.description(item) }}</span>\n        }\n      </mat-list-option>\n    }\n  </mat-selection-list>\n} @else {\n  <div class=\"border rounded p-3 mt-3\">\n    {{ 'Nessun elemento da visualizzare' }} <!-- // TODO: Translate in whole library -->\n  </div>\n}\n\n\n<!-- Pagination -->\n<!-- // TODO: Chnage pagination -->\n@if (items && totalItems && pageSize && totalItems > pageSize) {\n  <mat-paginator [length]=\"totalItems\"\n    [pageSize]=\"pageSize\" [hidePageSize]=\"true\" (page)=\"onPageChange($event)\" showFirstLastButtons />\n}", styles: [".list-item{border-bottom:1px solid #ebedef}\n"] }]
        }], ctorParameters: () => [{ type: i3.EditorComponent, decorators: [{
                    type: Inject,
                    args: [EDITOR]
                }] }], propDecorators: { changed: [{
                type: Output
            }], totalItems: [{
                type: Input
            }], pageSize: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,