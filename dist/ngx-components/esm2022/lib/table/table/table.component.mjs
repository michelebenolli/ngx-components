import { Component, ContentChildren, EventEmitter, Input, Output } from '@angular/core';
import { hasValue } from '../../../utils/utils';
import { DataType } from '../../../models/data-type';
import { TableColumnDirective } from '../table-column.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/button";
import * as i3 from "primeng/api";
import * as i4 from "../../filter/filter/filter.component";
import * as i5 from "../../action/action/action.component";
import * as i6 from "primeng/table";
export class TableComponent {
    constructor() {
        this.params = {};
        this.pageSize = 10;
        this.changed = new EventEmitter();
        this.DataType = DataType;
    }
    set data(value) { this.items = value; }
    getTemplate(name) {
        return this.templates?.find(x => x.id === name)?.template ?? null;
    }
    // TODO: What if actions are not empty but all not vsible?
    // Do not show table caption/action column!
    // TODO: CEll height, borders of table
    // TODO: Implement multiple-column sort
    sort(event) {
        const active = this.columns.find(x => x.sort === event.field)?.sort;
        if (active) {
            const direction = event.order == 1 ? 'asc' : 'desc';
            this.params.orderBy = [active + ' ' + direction];
            this.changed.emit(this.params);
        }
    }
    pageChange(event) {
        this.params.pageNumber = event.first / event.rows + 1;
        this.params.pageSize = event.rows;
        this.changed.emit(this.params);
    }
    // TODO: Page not changed when filter!!
    filter(requests) {
        if (this.totalItems)
            this.params.pageNumber = 1;
        this.params.filters = requests.filter(x => hasValue(x));
        this.changed.emit(this.params);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: TableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.0", type: TableComponent, selector: "app-table", inputs: { columns: "columns", actions: "actions", globalActions: "globalActions", filters: "filters", params: "params", totalItems: "totalItems", pageSize: "pageSize", data: "data" }, outputs: { changed: "changed" }, queries: [{ propertyName: "templates", predicate: TableColumnDirective }], ngImport: i0, template: "<!-- // TODO: Show paginator only when paging is active... -->\n<!-- // TODO: Check the condition of [totalRecords]-->\n<p-table [value]=\"items ?? []\" [lazy]=\"true\"\n  [paginator]=\"true\" [alwaysShowPaginator]=\"false\" [totalRecords]=\"totalItems ?? items?.length ?? 0\" [rows]=\"pageSize\"\n  [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"{first} - {last} di {totalRecords}\"\n  [rowsPerPageOptions]=\"[5, 10, 25, 100]\" (onSort)=\"sort($event)\" (onPage)=\"pageChange($event)\">\n\n  <!-- Table filters and actions -->\n  @if (filters?.length || globalActions?.length) {\n    <ng-template pTemplate=\"caption\">\n      <div class=\"d-flex align-items-center overflow-auto p-3\">\n        <app-filter [filters]=\"filters\" (onFilter)=\"filter($event)\" class=\"flex-grow-1\" />\n        @if (globalActions?.length) {\n          <app-action [actions]=\"globalActions\" class=\"ms-2\">\n            <ng-template #template let-action>\n              <p-button [label]=\"action.label\" styleClass=\"p-button-primary ms-2\" />\n            </ng-template>\n          </app-action>\n        }\n      </div>\n    </ng-template>\n  }\n\n  <!-- Table header -->\n  <ng-template pTemplate=\"header\">\n    <tr>\n      @for (column of columns; track column) {\n        <th [pSortableColumn]=\"column.sort\">\n          {{column.name}} \n          @if (column.sort) {\n            <p-sortIcon [field]=\"column.sort\" />\n            }\n      </th>\n    }\n    @if (actions) {\n      <th class=\"text-end\"></th>\n    }\n  </tr>\n</ng-template>\n\n<!-- Table body -->\n<ng-template pTemplate=\"body\" let-item>\n  <tr>\n    @for (column of columns; track column) {\n      <td>\n        <ng-container [ngTemplateOutlet]=\"column.template ? getTemplate(column.template) : tableTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item, column }\" />\n      </td>\n    }\n    @if (actions) {\n      <td class=\"text-end\">\n        <app-action [actions]=\"actions\" [data]=\"item\" />\n      </td>\n    }\n  </tr>\n</ng-template>\n\n<ng-template pTemplate=\"emptymessage\">\n  <tr>\n    <td [attr.colspan]=\"100\">\n      {{ 'Nessun elemento da visualizzare' }}\n    </td>\n  </tr>\n</ng-template>\n</p-table>\n\n<!-- Table data template -->\n<ng-template #tableTemplate let-item let-column=\"column\">\n  @switch (column.type) {\n        @case (DataType.Date) {\n            {{ column.value(item) | date: 'dd/MM/yyyy' }}\n        }\n        @case (DataType.DateTime) {\n            {{ column.value(item) | date: 'dd/MM/yyyy, hh:mm' }}\n        }\n        @case (DataType.Amount) {\n            {{ column.value(item) | currency: 'EUR': 'symbol' : undefined: 'it-IT' }}\n        }\n        @case (DataType.Bool) {\n            {{ column.value(item) ? 'Si': 'No' }}\n        <!-- // TODO: Translate -->\n        }\n        @case (DataType.Color) {\n            <i class=\"bi bi-circle-fill\" [style.color]=\"column.value(item)\"></i>\n        }\n        @default {\n            {{ column.value(item) }}\n        }\n    }\n  </ng-template>", styles: [":host::ng-deep .p-datatable{border:2px solid transparent;border-radius:5px}:host::ng-deep .p-datatable .p-datatable-tbody>tr>td{padding:.5rem 1rem;min-height:37px}:host::ng-deep .p-datatable .p-datatable-header{background-color:#fff;padding:0}\n"], dependencies: [{ kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "raised", "rounded", "text", "plain", "severity", "outlined", "link", "size", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i3.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i4.FilterComponent, selector: "app-filter", inputs: ["filters"], outputs: ["onFilter"] }, { kind: "component", type: i5.ActionComponent, selector: "app-action", inputs: ["actions", "data"] }, { kind: "component", type: i6.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "directive", type: i6.SortableColumn, selector: "[pSortableColumn]", inputs: ["pSortableColumn", "pSortableColumnDisabled"] }, { kind: "component", type: i6.SortIcon, selector: "p-sortIcon", inputs: ["field"] }, { kind: "pipe", type: i1.CurrencyPipe, name: "currency" }, { kind: "pipe", type: i1.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: TableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-table', template: "<!-- // TODO: Show paginator only when paging is active... -->\n<!-- // TODO: Check the condition of [totalRecords]-->\n<p-table [value]=\"items ?? []\" [lazy]=\"true\"\n  [paginator]=\"true\" [alwaysShowPaginator]=\"false\" [totalRecords]=\"totalItems ?? items?.length ?? 0\" [rows]=\"pageSize\"\n  [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"{first} - {last} di {totalRecords}\"\n  [rowsPerPageOptions]=\"[5, 10, 25, 100]\" (onSort)=\"sort($event)\" (onPage)=\"pageChange($event)\">\n\n  <!-- Table filters and actions -->\n  @if (filters?.length || globalActions?.length) {\n    <ng-template pTemplate=\"caption\">\n      <div class=\"d-flex align-items-center overflow-auto p-3\">\n        <app-filter [filters]=\"filters\" (onFilter)=\"filter($event)\" class=\"flex-grow-1\" />\n        @if (globalActions?.length) {\n          <app-action [actions]=\"globalActions\" class=\"ms-2\">\n            <ng-template #template let-action>\n              <p-button [label]=\"action.label\" styleClass=\"p-button-primary ms-2\" />\n            </ng-template>\n          </app-action>\n        }\n      </div>\n    </ng-template>\n  }\n\n  <!-- Table header -->\n  <ng-template pTemplate=\"header\">\n    <tr>\n      @for (column of columns; track column) {\n        <th [pSortableColumn]=\"column.sort\">\n          {{column.name}} \n          @if (column.sort) {\n            <p-sortIcon [field]=\"column.sort\" />\n            }\n      </th>\n    }\n    @if (actions) {\n      <th class=\"text-end\"></th>\n    }\n  </tr>\n</ng-template>\n\n<!-- Table body -->\n<ng-template pTemplate=\"body\" let-item>\n  <tr>\n    @for (column of columns; track column) {\n      <td>\n        <ng-container [ngTemplateOutlet]=\"column.template ? getTemplate(column.template) : tableTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item, column }\" />\n      </td>\n    }\n    @if (actions) {\n      <td class=\"text-end\">\n        <app-action [actions]=\"actions\" [data]=\"item\" />\n      </td>\n    }\n  </tr>\n</ng-template>\n\n<ng-template pTemplate=\"emptymessage\">\n  <tr>\n    <td [attr.colspan]=\"100\">\n      {{ 'Nessun elemento da visualizzare' }}\n    </td>\n  </tr>\n</ng-template>\n</p-table>\n\n<!-- Table data template -->\n<ng-template #tableTemplate let-item let-column=\"column\">\n  @switch (column.type) {\n        @case (DataType.Date) {\n            {{ column.value(item) | date: 'dd/MM/yyyy' }}\n        }\n        @case (DataType.DateTime) {\n            {{ column.value(item) | date: 'dd/MM/yyyy, hh:mm' }}\n        }\n        @case (DataType.Amount) {\n            {{ column.value(item) | currency: 'EUR': 'symbol' : undefined: 'it-IT' }}\n        }\n        @case (DataType.Bool) {\n            {{ column.value(item) ? 'Si': 'No' }}\n        <!-- // TODO: Translate -->\n        }\n        @case (DataType.Color) {\n            <i class=\"bi bi-circle-fill\" [style.color]=\"column.value(item)\"></i>\n        }\n        @default {\n            {{ column.value(item) }}\n        }\n    }\n  </ng-template>", styles: [":host::ng-deep .p-datatable{border:2px solid transparent;border-radius:5px}:host::ng-deep .p-datatable .p-datatable-tbody>tr>td{padding:.5rem 1rem;min-height:37px}:host::ng-deep .p-datatable .p-datatable-header{background-color:#fff;padding:0}\n"] }]
        }], propDecorators: { columns: [{
                type: Input
            }], actions: [{
                type: Input
            }], globalActions: [{
                type: Input
            }], filters: [{
                type: Input
            }], params: [{
                type: Input
            }], totalItems: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], data: [{
                type: Input
            }], changed: [{
                type: Output
            }], templates: [{
                type: ContentChildren,
                args: [TableColumnDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,