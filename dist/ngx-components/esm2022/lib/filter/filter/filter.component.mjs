import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import * as _ from 'lodash'; // TODO USe import { cloneDeep } from 'lodash/cloneDeep';
import { OverlayComponent } from '../../overlay';
import { hasValue } from '../../../utils/utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../text-filter/text-filter.component";
import * as i3 from "../date-filter/date-filter.component";
import * as i4 from "../select-filter/select-filter.component";
export class FilterComponent {
    constructor() {
        this.onFilter = new EventEmitter(); // TODO: Rename
    }
    ngOnInit() {
        const visible = this.filters?.filter(x => x.type != 'hidden');
        this.hasFilters = !!visible?.some(x => !x.overlay);
        this.hasOverlayFilters = !!visible?.some(x => x.overlay);
    }
    apply(filter) {
        if (filter?.overlay)
            return;
        this.overlay?.hide();
        this.onFilter.emit(this.getRequests());
    }
    clear() {
        this.filters?.filter(x => x.type != 'hidden').forEach(x => x.request.value = undefined);
        this.filters = _.cloneDeep(this.filters);
        this.onFilter.emit(this.getRequests());
    }
    getRequests() {
        return this.filters?.filter(x => hasValue(x.request)).map(x => x.request);
    }
    // TODO: Why ondestroy needed? 
    ngOnDestroy() {
        this.filters?.filter(x => x.type != 'hidden').forEach(x => x.request.value = undefined);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: FilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.2.0", type: FilterComponent, selector: "app-filter", inputs: { filters: "filters" }, outputs: { onFilter: "onFilter" }, viewQueries: [{ propertyName: "overlay", first: true, predicate: OverlayComponent, descendants: true }], ngImport: i0, template: "@if (hasFilters || hasOverlayFilters) {\n  <div class=\"d-flex align-items-center w-100\">\n    @if (hasFilters) {\n      <div class=\"filters\">\n        @for (filter of filters; track filter) {\n          @if (!filter.overlay) {\n            <ng-container *ngTemplateOutlet=\"filterTemplate; context:{filter}\" />\n          }\n        }\n      </div>\n    }\n    <!-- // TODO: Enable overlay -->\n    <!--<ng-container *ngIf=\"hasOverlayFilters\">\n    <app-overlay [style]=\"{ 'min-width': '350px' }\">\n      <p class=\"font-semibold\">{{ 'Filtri' | translate }}</p>\n      <div class=\"panel-filters\">\n        <ng-container *ngFor=\"let filter of filters\">\n          <ng-container *ngIf=\"filter.overlay\">\n            <ng-container *ngTemplateOutlet=\"filterTemplate; context:{filter}\" />\n          </ng-container>\n        </ng-container>\n      </div>\n      <div class=\"d-flex justify-content-end\">\n        <p-button [label]=\"'Cancella filtri'\" styleClass=\"p-button-text me-2\" (click)=\"clear()\" />\n        <p-button [label]=\"'Applica'\" styleClass=\"p-button-primary\" (click)=\"apply()\" />\n      </div>\n    </app-overlay>\n    <p-button icon=\"bi bi-funnel\" styleClass=\"p-button-primary {{ hasFilters ? 'ms-3' : '' }}\"\n      cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" (click)=\"overlay.toggle(origin)\" />\n    </ng-container>-->\n  </div>\n}\n\n<ng-template #filterTemplate let-filter=\"filter\">\n  @if (filter.type !== 'hidden') {\n    <div class=\"filter\">\n      @switch (filter.type) {\n        @case ('text') {\n          <app-text-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n        @case ('select') {\n          <app-select-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n        @case ('date') {\n          <app-date-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n      }\n    </div>\n  }\n</ng-template>", styles: [".filters{width:100%;display:flex}.filters .filter{width:100%;margin-right:1rem}.filters .filter:last-child{margin-right:0}.panel-filters .filter{margin-bottom:1rem}\n"], dependencies: [{ kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.TextFilterComponent, selector: "app-text-filter", inputs: ["filter"], outputs: ["changed"] }, { kind: "component", type: i3.DateFilterComponent, selector: "app-date-filter", inputs: ["filter"], outputs: ["changed"] }, { kind: "component", type: i4.SelectFilterComponent, selector: "app-select-filter", inputs: ["filter"], outputs: ["changed"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.0", ngImport: i0, type: FilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-filter', template: "@if (hasFilters || hasOverlayFilters) {\n  <div class=\"d-flex align-items-center w-100\">\n    @if (hasFilters) {\n      <div class=\"filters\">\n        @for (filter of filters; track filter) {\n          @if (!filter.overlay) {\n            <ng-container *ngTemplateOutlet=\"filterTemplate; context:{filter}\" />\n          }\n        }\n      </div>\n    }\n    <!-- // TODO: Enable overlay -->\n    <!--<ng-container *ngIf=\"hasOverlayFilters\">\n    <app-overlay [style]=\"{ 'min-width': '350px' }\">\n      <p class=\"font-semibold\">{{ 'Filtri' | translate }}</p>\n      <div class=\"panel-filters\">\n        <ng-container *ngFor=\"let filter of filters\">\n          <ng-container *ngIf=\"filter.overlay\">\n            <ng-container *ngTemplateOutlet=\"filterTemplate; context:{filter}\" />\n          </ng-container>\n        </ng-container>\n      </div>\n      <div class=\"d-flex justify-content-end\">\n        <p-button [label]=\"'Cancella filtri'\" styleClass=\"p-button-text me-2\" (click)=\"clear()\" />\n        <p-button [label]=\"'Applica'\" styleClass=\"p-button-primary\" (click)=\"apply()\" />\n      </div>\n    </app-overlay>\n    <p-button icon=\"bi bi-funnel\" styleClass=\"p-button-primary {{ hasFilters ? 'ms-3' : '' }}\"\n      cdkOverlayOrigin #origin=\"cdkOverlayOrigin\" (click)=\"overlay.toggle(origin)\" />\n    </ng-container>-->\n  </div>\n}\n\n<ng-template #filterTemplate let-filter=\"filter\">\n  @if (filter.type !== 'hidden') {\n    <div class=\"filter\">\n      @switch (filter.type) {\n        @case ('text') {\n          <app-text-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n        @case ('select') {\n          <app-select-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n        @case ('date') {\n          <app-date-filter [filter]=\"filter\" (changed)=\"apply(filter)\" />\n        }\n      }\n    </div>\n  }\n</ng-template>", styles: [".filters{width:100%;display:flex}.filters .filter{width:100%;margin-right:1rem}.filters .filter:last-child{margin-right:0}.panel-filters .filter{margin-bottom:1rem}\n"] }]
        }], propDecorators: { filters: [{
                type: Input
            }], onFilter: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [OverlayComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jb21wb25lbnRzL3NyYy9saWIvZmlsdGVyL2ZpbHRlci9maWx0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNvbXBvbmVudHMvc3JjL2xpYi9maWx0ZXIvZmlsdGVyL2ZpbHRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQyx5REFBeUQ7QUFHdEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7O0FBT2hELE1BQU0sT0FBTyxlQUFlO0lBTDVCO1FBUVksYUFBUSxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDLENBQUMsZUFBZTtLQStCMUU7SUExQkMsUUFBUTtRQUNOLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxLQUFLLENBQUMsTUFBZTtRQUNuQixJQUFJLE1BQU0sRUFBRSxPQUFPO1lBQUUsT0FBTztRQUM1QixJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsK0JBQStCO0lBQy9CLFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDMUYsQ0FBQzs4R0FqQ1UsZUFBZTtrR0FBZixlQUFlLDhKQUlmLGdCQUFnQixnRENoQjdCLHU0REFpRGM7OzJGRHJDRCxlQUFlO2tCQUwzQixTQUFTOytCQUNFLFlBQVk7OEJBTWIsT0FBTztzQkFBZixLQUFLO2dCQUNJLFFBQVE7c0JBQWpCLE1BQU07Z0JBQ3NCLE9BQU87c0JBQW5DLFNBQVM7dUJBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnOyAvLyBUT0RPIFVTZSBpbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gvY2xvbmVEZWVwJztcclxuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2ZpbHRlcic7XHJcbmltcG9ydCB7IEZpbHRlclJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvZmlsdGVyLXJlcXVlc3QnO1xyXG5pbXBvcnQgeyBPdmVybGF5Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vb3ZlcmxheSc7XHJcbmltcG9ydCB7IGhhc1ZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZmlsdGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9maWx0ZXIuY29tcG9uZW50LnNjc3MnXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQElucHV0KCkgZmlsdGVycz86IEZpbHRlcltdO1xyXG4gIEBPdXRwdXQoKSBvbkZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsdGVyUmVxdWVzdFtdPigpOyAvLyBUT0RPOiBSZW5hbWVcclxuICBAVmlld0NoaWxkKE92ZXJsYXlDb21wb25lbnQpIG92ZXJsYXk/OiBPdmVybGF5Q29tcG9uZW50O1xyXG4gIGhhc0ZpbHRlcnMhOiBib29sZWFuO1xyXG4gIGhhc092ZXJsYXlGaWx0ZXJzITogYm9vbGVhbjtcclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBjb25zdCB2aXNpYmxlID0gdGhpcy5maWx0ZXJzPy5maWx0ZXIoeCA9PiB4LnR5cGUgIT0gJ2hpZGRlbicpO1xyXG4gICAgdGhpcy5oYXNGaWx0ZXJzID0gISF2aXNpYmxlPy5zb21lKHggPT4gIXgub3ZlcmxheSk7XHJcbiAgICB0aGlzLmhhc092ZXJsYXlGaWx0ZXJzID0gISF2aXNpYmxlPy5zb21lKHggPT4geC5vdmVybGF5KTtcclxuICB9XHJcblxyXG4gIGFwcGx5KGZpbHRlcj86IEZpbHRlcikge1xyXG4gICAgaWYgKGZpbHRlcj8ub3ZlcmxheSkgcmV0dXJuO1xyXG4gICAgdGhpcy5vdmVybGF5Py5oaWRlKCk7XHJcbiAgICB0aGlzLm9uRmlsdGVyLmVtaXQodGhpcy5nZXRSZXF1ZXN0cygpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5maWx0ZXJzPy5maWx0ZXIoeCA9PiB4LnR5cGUgIT0gJ2hpZGRlbicpLmZvckVhY2goeCA9PiB4LnJlcXVlc3QudmFsdWUgPSB1bmRlZmluZWQpO1xyXG4gICAgdGhpcy5maWx0ZXJzID0gXy5jbG9uZURlZXAodGhpcy5maWx0ZXJzKTtcclxuICAgIHRoaXMub25GaWx0ZXIuZW1pdCh0aGlzLmdldFJlcXVlc3RzKCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVxdWVzdHMoKTogRmlsdGVyUmVxdWVzdFtdIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcnM/LmZpbHRlcih4ID0+IGhhc1ZhbHVlKHgucmVxdWVzdCkpLm1hcCh4ID0+IHgucmVxdWVzdCk7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBXaHkgb25kZXN0cm95IG5lZWRlZD8gXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmZpbHRlcnM/LmZpbHRlcih4ID0+IHgudHlwZSAhPSAnaGlkZGVuJykuZm9yRWFjaCh4ID0+IHgucmVxdWVzdC52YWx1ZSA9IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG59XHJcbiIsIkBpZiAoaGFzRmlsdGVycyB8fCBoYXNPdmVybGF5RmlsdGVycykge1xuICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciB3LTEwMFwiPlxuICAgIEBpZiAoaGFzRmlsdGVycykge1xuICAgICAgPGRpdiBjbGFzcz1cImZpbHRlcnNcIj5cbiAgICAgICAgQGZvciAoZmlsdGVyIG9mIGZpbHRlcnM7IHRyYWNrIGZpbHRlcikge1xuICAgICAgICAgIEBpZiAoIWZpbHRlci5vdmVybGF5KSB7XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiZmlsdGVyVGVtcGxhdGU7IGNvbnRleHQ6e2ZpbHRlcn1cIiAvPlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgfVxuICAgIDwhLS0gLy8gVE9ETzogRW5hYmxlIG92ZXJsYXkgLS0+XG4gICAgPCEtLTxuZy1jb250YWluZXIgKm5nSWY9XCJoYXNPdmVybGF5RmlsdGVyc1wiPlxuICAgIDxhcHAtb3ZlcmxheSBbc3R5bGVdPVwieyAnbWluLXdpZHRoJzogJzM1MHB4JyB9XCI+XG4gICAgICA8cCBjbGFzcz1cImZvbnQtc2VtaWJvbGRcIj57eyAnRmlsdHJpJyB8IHRyYW5zbGF0ZSB9fTwvcD5cbiAgICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1maWx0ZXJzXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGZpbHRlciBvZiBmaWx0ZXJzXCI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImZpbHRlci5vdmVybGF5XCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiZmlsdGVyVGVtcGxhdGU7IGNvbnRleHQ6e2ZpbHRlcn1cIiAvPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG4gICAgICAgIDxwLWJ1dHRvbiBbbGFiZWxdPVwiJ0NhbmNlbGxhIGZpbHRyaSdcIiBzdHlsZUNsYXNzPVwicC1idXR0b24tdGV4dCBtZS0yXCIgKGNsaWNrKT1cImNsZWFyKClcIiAvPlxuICAgICAgICA8cC1idXR0b24gW2xhYmVsXT1cIidBcHBsaWNhJ1wiIHN0eWxlQ2xhc3M9XCJwLWJ1dHRvbi1wcmltYXJ5XCIgKGNsaWNrKT1cImFwcGx5KClcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9hcHAtb3ZlcmxheT5cbiAgICA8cC1idXR0b24gaWNvbj1cImJpIGJpLWZ1bm5lbFwiIHN0eWxlQ2xhc3M9XCJwLWJ1dHRvbi1wcmltYXJ5IHt7IGhhc0ZpbHRlcnMgPyAnbXMtMycgOiAnJyB9fVwiXG4gICAgICBjZGtPdmVybGF5T3JpZ2luICNvcmlnaW49XCJjZGtPdmVybGF5T3JpZ2luXCIgKGNsaWNrKT1cIm92ZXJsYXkudG9nZ2xlKG9yaWdpbilcIiAvPlxuICAgIDwvbmctY29udGFpbmVyPi0tPlxuICA8L2Rpdj5cbn1cblxuPG5nLXRlbXBsYXRlICNmaWx0ZXJUZW1wbGF0ZSBsZXQtZmlsdGVyPVwiZmlsdGVyXCI+XG4gIEBpZiAoZmlsdGVyLnR5cGUgIT09ICdoaWRkZW4nKSB7XG4gICAgPGRpdiBjbGFzcz1cImZpbHRlclwiPlxuICAgICAgQHN3aXRjaCAoZmlsdGVyLnR5cGUpIHtcbiAgICAgICAgQGNhc2UgKCd0ZXh0Jykge1xuICAgICAgICAgIDxhcHAtdGV4dC1maWx0ZXIgW2ZpbHRlcl09XCJmaWx0ZXJcIiAoY2hhbmdlZCk9XCJhcHBseShmaWx0ZXIpXCIgLz5cbiAgICAgICAgfVxuICAgICAgICBAY2FzZSAoJ3NlbGVjdCcpIHtcbiAgICAgICAgICA8YXBwLXNlbGVjdC1maWx0ZXIgW2ZpbHRlcl09XCJmaWx0ZXJcIiAoY2hhbmdlZCk9XCJhcHBseShmaWx0ZXIpXCIgLz5cbiAgICAgICAgfVxuICAgICAgICBAY2FzZSAoJ2RhdGUnKSB7XG4gICAgICAgICAgPGFwcC1kYXRlLWZpbHRlciBbZmlsdGVyXT1cImZpbHRlclwiIChjaGFuZ2VkKT1cImFwcGx5KGZpbHRlcilcIiAvPlxuICAgICAgICB9XG4gICAgICB9XG4gICAgPC9kaXY+XG4gIH1cbjwvbmctdGVtcGxhdGU+Il19